#include < iostream >
  using namespace std;
class fushu {
  private:
    double shibu;
  	double xubu;

  public:
    fushu();
	  fushu(double a, double bb);
	  ~fushu();
	  fushu operator + (const fushu & bb) const;
	  fushu operator - (const fushu & bb) const;
	  fushu operator * (const fushu & bb) const;
	  friend const fushu & operator~(const fushu & bb);
	  friend const fushu & operator * (const double & a, const fushu & bb);
	  friend std::ostream & operator << (std::ostream & os, const fushu & bb);
	  friend std::istream & operator >> (std::istream & os, fushu & bb); //cin>>这个输入流符号重载记住要用istream，别用ostream
};

//默认构造函数
fushu::fushu() {
  shibu = 0;
  xubu = 0;
}

//构造函数
fushu::fushu(double aa, double bb) {
  shibu = aa;
  xubu = bb;
  cout << "构造函数被调用啦！" << endl;
}

//析构函数
fushu::~fushu() {
  cout << "这儿被析构啦~" << endl;
}

fushu fushu::operator + (const fushu & bb) const{ //重载加号
  return fushu(shibu + bb.shibu, xubu + bb.xubu);
}

fushu fushu::operator - (const fushu & bb) const{ //重载减号
  return fushu(shibu - bb.shibu, xubu - bb.xubu);
}

fushu fushu::operator * (const fushu & bb) const{ //重载乘号-复数乘法
  return fushu(shibu * bb.shibu - xubu * bb.xubu, shibu * bb.xubu + xubu * bb.shibu);
}

const fushu & operator~(const fushu & bb){ //重载共轭符号~  注意bb是一个引用，所以返回的类型也应该对应的是引用而不是值
  return fushu(bb.shibu, (-1) * (bb.xubu));
}

const fushu & operator * (const double & a,const fushu & bb){ //重载乘号-实数乘法,实数和复数相乘，且顺序为实数在前。这个没有最前边的那个const编译不让通过
  return fushu(a * bb.shibu, a * bb.xubu);
} //这里警告说返回了一个临时的引用变量，貌似不太安全，注意一下

std::ostream & operator << (std::ostream & os,const fushu & bb){ //重载打印-- 友元函数 在原型解释的时候要把friend去掉
  os << "(" << bb.shibu << "," << bb.xubu << "i )" << endl;
  return os;
}

std::istream & operator >> (std::istream & os, fushu & bb){ //重载>>-- 友元函数 在原型解释的时候要把friend去掉
  double a, b;
  os >> a >> b;
  bb.shibu = a;
  bb.xubu = b;
  return os;
}

//把complex换成fushu，是一样的
#include < iostream >
  using namespace std;
int main() {
  fushu a(3.0, 4.0);
  fushu c;
  cout << "Enter a complex number (q to quit):\n";
  while (cin >> c) {
    cout << "c is " << c << '\n';
    cout << "complex conjugate is " << ~c << '\n';
    cout << "a is " << a << "\n";
    cout << "a + c is " << a + c << '\n';
    cout << "a - c is " << a - c << '\n';
    cout << "a * c is " << a * c << '\n';
    cout << "2 * c is " << 2 * c << '\n';
    cout << "Enter a fushu number (q to quit):\n";
  }
  cout << "Done!\n";
  system("pause");
  return 0;
}
