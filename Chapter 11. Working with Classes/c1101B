#include < cmath >
// includes <iostream>
using std::sqrt;
using std::sin;
using std::cos;
using std::atan;
using std::atan2;
using std::cout;
namespace VECTOR {
  const double Rad_to_deg = 45.0 / atan(1.0); //  角度/弧度
  void Vector::set_mag(){ //勾股弦长
    mag = sqrt(x * x + y * y);
  }

  void Vector::set_ang(){ //与原点（0.0）所成夹角的rad弧度
    if (x == 0.0 && y == 0.0)
      ang = 0.0;
    else
      ang = atan2(y, x); //ang是角度
  }

  //弧度制rad  rad*rad_to_deg=角度deg
  // set x from polar coordinate
  void Vector::set_x() {
    x = mag * cos(ang); //x水平坐标轴的长度 ang是角度制 deg
  }

  // set y from polar coordinate
  void Vector::set_y() {
    y = mag * sin(ang); //y 垂直 坐标轴的长度 ang是角度制 deg
  }

  // public methods
  Vector::Vector() {
    x = y = mag = ang = 0.0; // 原点位置，所有有关坐标轴全部恢复0。默认是rect直角坐标制
    mode = RECT;
  }

  //极坐标和直角坐标的区别见wiki。 极坐标（半径，弧度或角度）；θ=atan2（y , x）;
  Vector::Vector(double n1, double n2, Mode form) //默认构造函数
  {
    mode = form;
    if (form == RECT) //若提供的是直角坐标系下的横纵坐标轴
    {
      x = n1;
      y = n2;
      set_mag(); //直角坐标的xy转极坐标的半径和夹角角度
      set_ang();
    } else if (form == POL) {
      mag = n1;
      ang = n2 / Rad_to_deg; //ang是角度制，rad是弧度制
      set_x();
      set_y();
    } else {
      cout << "Incorrect 3rd argument to Vector() -- ";
      cout << "vector set to 0\n";
      x = y = mag = ang = 0.0;
      mode = RECT;
    }
  }

  void Vector::reset(double n1, double n2, Mode form) {
    mode = form;
    if (form == RECT) {
      x = n1;
      y = n2;
      set_mag();
      set_ang();
    } else if (form == POL) {
      mag = n1;
      ang = n2 / Rad_to_deg;
      set_x();
      set_y();
    } else {
      cout << "Incorrect 3rd argument to Vector() -- ";
      cout << "vector set to 0\n";
      x = y = mag = ang = 0.0;
      mode = RECT;
    }
  }

  Vector::~Vector() {}
  void Vector::polar_mode() {
    mode = POL;
  }
  void Vector::rect_mode() {
    mode = RECT;
  }

  Vector Vector::operator + (const Vector & b) const {
    return Vector(x + b.x, y + b.y);
  }

  Vector Vector::operator - (const Vector & b) const {
    return Vector(x - b.x, y - b.y);
  }

  Vector Vector::operator - () const {
    return Vector(-x, -y);
  }

  Vector Vector::operator * (double n) const {
    return Vector(n * x, n * y);
  }

  Vector operator * (double n,
    const Vector & a) {
    return a * n;
  }

  std::ostream & operator << (std::ostream & os,
    const Vector & v) {
    if (v.mode == Vector::RECT)
      os << "(x,y) = (" << v.x << ", " << v.y << ")";
    else if (v.mode == Vector::POL) {
      os << "(m,a) = (" << v.mag << ", " <<
        v.ang * Rad_to_deg << ")";
    } else
      os << "Vector object mode is invalid";
    return os;
  }
}
