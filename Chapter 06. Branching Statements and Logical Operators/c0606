//6.6
#include < iostream >
#include < string >
  using namespace std;
int main() {
  struct bop {
    string name;
    double fund;
  };
  int m;
  cout << "enter the number you wanna to type in: ";
  cin >> m;
  bop * member = new bop[m]; //不能直接用bop member[m],否则会被拒绝。
  cout << "you are going to enter some data about the fund provicer! you can enter @ to end it and see the result\n";

  int i = 0;
  string temp;
  double fund1;
  cout << "enter 0 people's name: ";
  cin >> temp;
  bool aa = true;
  //temp.find("@")==temp.npos,寻找字符中的一个@，如果没找到，返回一个特别的标志c++中用npos表示  if(cin>>k)和while(cin>>k)都会出现，符合条件的模块不被运行，而不符合的部分会运行。
  //如果二者改用if（cin）或者if（!cin）【把if换做while效果也是一样的】则是正常运行的
  while (i != m && temp.find("@") == temp.npos) {
    {
      if (cin && aa == true) { //while下边的if最好范围不超过while所涵盖的总集
        member[i].name = temp;
      } //多条语句要大括号，非循环中不要用break，取名不应有太多限制。另外由于string全输数字也是允许通过
    }
    cout << "his fund: ";
    getchar();
    bool a = true;
    cin >> fund1; {
      if (cin && a == true) //别写成赋值的符号
      {
        member[i].fund = fund1;
      } //多条语句要大括号
      else {
        cout << "you have enter a wrong type ,please enter again!" << endl;
        cin.clear();
        cin.sync();
        cout << "his fund: ";
        cin >> fund1;
        a = true;
      } //bool值和for循环结合的方法好，功能和goto一样，可定位回去
    }
    i++;
    if (i < m) {
      cout << "enter " << i << "people's name: ";
      getchar(); //在循环中后接cin字符串的，注意把之前的清理一下。注意这个语句放置的位置
      cin >> temp;
    } //没有这个循环走不下去,这个接下去是回到while而不是if
    //**如果这儿if前不放一个大括号，执行到这里，cin>>temp,不接受回车键，getchar（）会收回车键，所以没有大括号的情况下，必须输入数值然后再回车才行
  }

  if (i == m)
    cout << "you have touch the margin!\n";
  else
    cout << "you wanna to quit,ok bye! \n ";
  //开始输出
  int k;
  int l;
  cout << "these are Grand Patrons: " << endl; {
    for (k = 0; k < m; k++) {
      if (member[k].fund > 10000) {
        cout << member[k].name << "  " << member[k].fund << endl;
      }
    }
    if (k == 0) {
      cout << "None!";
    }
  }
  cout << "these are Patrons: " << endl; {
    for (l = 0; l < m; l++) {
      if (member[l].fund < 10000) {
        cout << member[l].name << "  " << member[l].fund << endl;
      }
    }
    if (l == 0) {
      cout << "None!";
    }
  }
  delete[] member;
  system("pause");
  return 0;
}
