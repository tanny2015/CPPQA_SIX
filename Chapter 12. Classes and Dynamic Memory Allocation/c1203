#include < iostream >
#include < cstring >
  using namespace std;

class Stock {
  private:
    char * company; //改动
    int shares;
    double share_val;
    double total_val;
    void set_tot() {
      total_val = shares * share_val;
    }

  public:
    Stock();
    Stock(const char * co, long n = 0, double pr = 0.0);
    ~Stock();
    void buy(long num, double price);
    void sell(long num, double price);
    void update(double price);
    friend ostream & operator << (ostream & ct, const Stock & aa);
    const Stock & topval(const Stock & s) const;
};

//原型说明
Stock::Stock() {
  shares = 0;
  share_val = 0.0;
  total_val = 0.0;
}

Stock::Stock(const char * co, long n, double pr) {
  company = new char[strlen(co) + 1];
  strcpy(company, co);
  if (n < 0) {
    std::cout << "Number of shares can't be negative; " <<
      company << " shares set to 0.\n";
    shares = 0;
  } else
    shares = n;
  share_val = pr;
  set_tot();
}

Stock::~Stock() {
  cout << "析构函数被调用！" << endl;
  delete[] company;
}

void Stock::buy(long num, double price) {
  if (num < 0) {
    std::cout << "Number of shares purchased can't be negative. " <<
      "Transaction is aborted.\n";
  } else {
    shares += num;
    share_val = price;
    set_tot();
  }
}

void Stock::sell(long num, double price) {
  using std::cout;
  if (num < 0) {
    cout << "Number of shares sold can't be negative. " <<
      "Transaction is aborted.\n";
  } else if (num > shares) {
    cout << "You can't sell more than you have! " <<
      "Transaction is aborted.\n";
  } else {
    shares -= num;
    share_val = price;
    set_tot();
  }
}

void Stock::update(double price) {
  share_val = price;
  set_tot();
}

ostream & operator << (ostream & ct, const Stock & aa) {
  ios_base::fmtflags orig =
    ct.setf(ios_base::fixed, ios_base::floatfield);
  std::streamsize prec = ct.precision(3);
  ct << "Company: " << aa.company <<
    "  Shares: " << aa.shares << '\n';
  ct << "  Share Price: $" << aa.share_val;
  ct.precision(2);
  ct << "  Total Worth: $" << aa.total_val << '\n';
  ct.setf(orig, ios_base::floatfield);
  ct.precision(prec);
  return ct;
}

const Stock & Stock::topval(const Stock & s) const {
  if (s.total_val > total_val)
    return s;
  else
    return *this;
}

#include < iostream >
const int STKS = 4;
int main() {
  //{
  Stock stocks[STKS] = {
    Stock("NanoSmart", 12, 20.0),
    Stock("Boffo Objects", 200, 2.0),
    Stock("Monolithic Obelisks", 130, 3.25),
    Stock("Fleep Enterprises", 60, 6.5)
  };
  std::cout << "Stock holdings:\n";
  int st;
  for (st = 0; st < STKS; st++)
    cout << stocks[st];
  const Stock * top = & stocks[0];
  for (st = 1; st < STKS; st++)
    top = & top - > topval(stocks[st]);
  std::cout << "\nMost valuable holding:\n";
  cout << * top;
  //}
  system("pause");
  return 0;
}
