#include < iostream >
#include < cstring >
  using namespace std;
const int Len = 40;

class golf {
  private:
    char fullname[Len];
    int handicap;
  public:
    golf();
    golf(const char * name, int hc); //构造函数
    ~golf(); //析构函数
    int setgolf();
    void handicap1(int hc);
    void showgolf();
};

//函数解释
golf::golf(){ //这个默认构造函数如果不写的话，后边使用的时候 ，声明一个类对象golf ann；（--这个句子的意思是调用默认构造函数）会报错，说是没有合适的默认构造函数可供调用。
  strcpy(fullname, "none");
  handicap = 0;
} //写成 fullname="none";报错说 incompatible types in assignment of 'const char [5]' to 'char [40]'

golf::golf(const char * name, int hc) {
  strcpy(fullname, name); // g.fullname=name;错误，指针和指针之间，以及有时指针和数组名之间不能互相赋值的，如果是char指针，考虑用strcpy()
  handicap = hc;
}

golf::~golf(){} //这个析构函数就算什么都不做也要写上这个解释，不然后边使用的时候会说析构函数还没有定义

//赋值为需要用户输入的数据。
int golf::setgolf() {
  cout << "please now enter the fullname: ";
  cin >> fullname;
  if (!cin) {
    cout << "no name has been entered! now quit.";
    return 0;
  }
  cin.sync();
  cout << endl;
  cout << "now enter the handicap :";
  cin >> handicap;
  cin.sync();
  return 1;
}

//将handicap重新设定新的值
void golf::handicap1(int hc) {
  handicap = hc;
}

// 显示内容
void golf::showgolf() {
  cout << "now let's see the result: \n" <<
    fullname << "'s handicap is: " << handicap << endl;
}

//main()开始写个实现
int main() { //声明类对象，一般是声明的同时要初始化。
  golf ann("Ann Birdfree", 24); //在这写个golf ann; ann.golf( "Ann Birdfree", 24);是不行的，golf ann;调用默认构造函数，如果没有默认构造函数，这边会说没有可供调用的默认构造函数。一般就是声明的时候赋值（这个赋值可以用默认构造函数或者带参数的构造函数）
  //使用非交互版本
  ann.showgolf();
  ann.handicap1(23); //修改handicap的值
  ann.showgolf();
  //使用交互版本
  golf andy; //别写成 golf andy()，这个错误。 golf andy表示调用默认构造函数
  andy.showgolf();
  andy.setgolf(); //让用户输入值
  andy.showgolf();

  system("pause");
  return 0;
}
