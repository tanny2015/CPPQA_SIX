#include < iostream >
#include < cstring >
  using namespace std;
class Move {
  private:
    double x;
    double y;
  public:
    Move(double a = 0, double b = 0);
    //如果没有a=0，直接写（a,b）那么如果用Move aa，就会报错，说没有默认构造函数。但是如果把
    //这句改为Move（），那么后边的add（）函数返回的Move（x1，x2）又会说，没有这种格式
    void showmove() const;
    Move add(const Move & m) const; //理解为把原来m中的x和y加上某个值后，把得到的值赋给新建的一个Move类对象然后返回这个新的类对象
    void reset(double a = 0, double b = 0); //这个是默认值的。后边说明的时候可以直接自己改动。如果不改的话，就只能用这个默认值。
};

//开始函数原型说明
Move::Move(double a, double b){ //不能在这儿写double a=0
  //cout<<"enter two value: \n";cin>>a>>b;//如果用这行，后边的add()函数在main中的实现会成问题。
  x = a;
  y = b;
}

void Move::showmove() const {
  cout << "now let's see the result: " <<
    "x = " << x << ";" << " y = " << y << endl;
}

Move Move::add(const Move & m) const{ //m是一个已知的值，在main中调用的时候，Move这个对象应该是有现成的值
  double x1 = x + m.x; //x=x+m.x;这样不行，因为这里的x是z.add()中z这个类对象的x，不要随便改动
  double y1 = y + m.y;
  return Move(x1, y1); //这个很重要！
}

void Move::reset(double a, double b) {
  x = a;
  y = b;
}

//main实现
// Move(double a=0,double b=0);
//showmove()const;
//Move add(const Move & m) const;
//reset(double a=0; double b=0);

int main() {
  Move m(2, 5); //调用 Move(double a=0,double b=0)，但是只要a和b重新赋值，他会跟着变
  m.showmove();
  Move aa(1, 3); //这个同样调用了 Move(double a=0,double b=0);这个功能类似于默认构造函数
  aa.showmove();
  //Move mm=aa.add(m) ;这样写没用 Move mm这一句已经包含了声明和初始化
  Move mm;
  mm = aa.add(m); //这个是二次赋值
  mm.showmove();

  mm.reset(1, 12);
  mm.showmove();

  mm.reset(); //不是构造函数，不能写成mm.reset. 调用 reset(double a=0; double b=0);
  mm.showmove();

  system("pause");
  return 0;
}
