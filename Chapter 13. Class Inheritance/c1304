//13.4 这没有要写main函数测试
#include <iostream>
#include <cstring>
using namespace std;
class Port
{
private:
    char * brand;
    char style[20];
    int bottles;
public:
    Port(const char * br = "none", const char * st = "none", int b = 0);
    Port(const Port & p);
    virtual ~Port() { delete [] brand; }
    Port & operator=(const Port & p);
    Port & operator+=(int b);
    Port & operator-=(int b);
    int BottleCount() const { return bottles; }
    virtual void Show() const;
    friend ostream & operator<<(ostream & os, const Port & p);
};

//*******************************************************************************************************

Port::Port(const char * br , const char * st , int b ):bottles(b)
{
    brand =new char[strlen(br)+1];
    strcpy(brand,br);
    strcpy(style,st);
}

Port::Port(const Port & p):bottles(p.bottles)
{
    brand =new char[strlen(p.brand)+1];
    strcpy(brand,p.brand);
    strcpy(style,p.style);
}

Port & Port::operator=(const Port & p)
{
    if(this==&p)
        return *this;
    else
        brand =new char[strlen(p.brand)+1];
    strcpy(brand,p.brand);
    strcpy(style,p.style);
    bottles=p.bottles;
}

Port & Port::operator+=(int b)
{
    this->bottles=this->bottles+1; return *this;
}

Port & Port::operator-=(int b)
{
    if (bottles!=0)
    {
        this->bottles=this->bottles-1;
        return *this;
    }
    else
        cout<<"the brand has been empty!"<<endl;
    return *this;
}

void Port::Show() const
{
    cout<<"Brand:"<<brand<<endl
    <<"Kind:" <<style<<endl
    <<"Bottles:"<<bottles<<endl;
}

ostream & operator<<(ostream & os, const Port & p)
{
    os<<p.brand<<","<<p.style<<","<<p.bottles<<".";
    return os;
}

//*******************************************************************************************************

class VintagePort : public Port
{
private:
    char * nickname;
    int year;
public:
    VintagePort():Port("NULL","NULL",0){nickname="null";year=0;};
    VintagePort(const char * br, int b, const char * nn, int y);
    VintagePort(const VintagePort & vp);
    ~VintagePort() { delete [] nickname; }
    VintagePort & operator=(const VintagePort & vp);
    void Show() const;
    friend ostream & operator<<(ostream & os, const VintagePort & vp);
};
//*******************************************************************************************************

VintagePort::VintagePort(const char * br, int b, const char * nn, int y):Port(br,"none" ,b)
{
    
    nickname=new char [strlen(nn)+1];
    strcpy(nickname,nn);
    year=y;
}

VintagePort::VintagePort(const VintagePort & vp):Port(vp)
{
    nickname=new char [strlen(vp.nickname)+1];
    strcpy(nickname,vp.nickname);
    year=vp.year;
}

VintagePort & VintagePort::operator=(const VintagePort & vp)
{
    if(this==&vp)
        return *this;
    else
        Port::operator=(vp);
    delete []nickname;
    nickname=new char [strlen(vp.nickname)+1];
    strcpy(nickname,vp.nickname);
    year=vp.year;
    return *this;
}
void VintagePort::Show() const
{
    Port::Show();
    cout<<nickname<<"is produced in "<<year<<endl;
}
ostream & operator<<(ostream & os, const VintagePort & vp)
{
    os<<(const Port&)vp;//此为强制类型转换，调用了基类函数的<<符号！打印了基类的部分！p529
    os<<vp.nickname<<","<<vp.year<<endl;
    return os;
}

